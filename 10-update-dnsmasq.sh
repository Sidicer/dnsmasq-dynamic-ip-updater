#!/bin/bash

# /etc/NetworkManager/dispatcher.d/10-update-dnsmasq.sh
#
# Deividas Gedgaudas @ github.com/Sidicer
#
# Used to update dnsmasq configuration and update it
# with the new IPV4 address of the interface.
#
# This is required so that on an DHCP event of a router
# our local DNS server would not become misconfigured
#
# IMPORTANT:
# Manually set MAIN_INTERFACE and DNSMASQ_DOMAIN variables
# before using this script

# Get current hostname without domain
MACHINE="$(uname -n 2>/dev/null)"
MACHINE=${MACHINE%%.*}

DNSMASQCD="/etc/dnsmasq.d"
# Set the path and name of the configuration file
CONFIGFILE="$DNSMASQCD/${MACHINE:-"auto-update"}.conf"

# Dispatcher passes in interface and action to the script
INTERFACE="$1"
ACTION="$2"

# Variables for logging
SCRIPT_NAME="[NM-Dispatcher 10-update-dnsmasq]"
LOG_INFO="logger -p daemon.info $SCRIPT_NAME"
LOG_WARN="logger -p daemon.warning $SCRIPT_NAME"
LOG_ERROR="logger -p daemon.error $SCRIPT_NAME"

# Read environmental file specific to this sript
# shellcheck disable=SC1091
[ -f "$(dirname "$0")/.env-update-dnsmasq" ] && . "$(dirname "$0")/.env-update-dnsmasq"
# In case file doesn't exist or variables are unset - fallback
FALLBACK_INTERFACE=$(ip addr | awk '/2: / {print $2}' | cut -d: -f1)
DNSMASQ_DOMAIN="${DNSMASQ_DOMAIN:-${LOCALDOMAIN:-homelab.lan}}"
MAIN_INTERFACE="${MAIN_INTERFACE:-${FALLBACK_INTERFACE:-enp2s0}}"

$LOG_INFO "Received action '$ACTION' on interface '$INTERFACE'"

# Debounce
LOCKFILE="/var/run/10-update-dnsmasq.lock"
# Try to create lockfile
if ! mkdir "$LOCKFILE" 2>/dev/null; then
  $LOG_WARN "Script already running (lockfile exists)"
  exit 0
fi
# Remove lockfile when script exits
trap 'rmdir "$LOCKFILE"' EXIT

# Exit script if intended for another interface
if [ "$INTERFACE" != "$MAIN_INTERFACE" ]; then
  $LOG_INFO "Exiting because $INTERFACE is not $MAIN_INTERFACE"
  exit 0
fi

# Check if configuration directory exists
if [ ! -d "$DNSMASQCD" ]; then
  $LOG_INFO "Creating directory $DNSMASQCD"
  if ! mkdir "$DNSMASQCD"; then
    $LOG_ERROR "Could not create $DNSMASQCD! Exiting..."
    exit 1
  fi
fi

# Trigger configuration update only by up and dhcp4-change actions
case "$ACTION" in
  up|dhcp4-change)
    # NOTE: Check if ip or ifconfig is used. Update NEW_IP accordingly
    NEW_IP=$(ip -4 addr show "$INTERFACE" | awk '/inet / {print $2}' | cut -d/ -f1)

    if [ -n "$NEW_IP" ]; then
      $LOG_INFO "New IP for $INTERFACE is $NEW_IP. Updating '$CONFIGFILE'"
      printf "# GENERATED BY %s\n# UPDATED AT %s\naddress=/.%s/%s\n" \
        "$0" "$(date)" "$DNSMASQ_DOMAIN" "$NEW_IP" > "$CONFIGFILE"

      $LOG_INFO "Validating $CONFIGFILE"
      if ! dnsmasq --test -C "$CONFIGFILE" >/dev/null 2>&1; then
        $LOG_ERROR "Invalid configuration in $CONFIGFILE"
        exit 1
      fi

      $LOG_INFO "Reloading dnsmasq daemon"
      if systemctl reload dnsmasq; then
        $LOG_INFO "Dnsmasq successfully reloaded"
      else
        $LOG_ERROR "Dnsmasq daemon failed to reload"
      fi
    else
      $LOG_WARN "No IPV4 address found for interface '$INTERFACE'. Did not update $CONFIGFILE"
    fi
    ;;
  *)
    ;;
esac
